Vulnerability: Privilege Escalation
In the insecure version of code, the route /update-role is vulnerable to privilege escalation attacks. 
This vulnerability stems from the fact that the application directly accepts and uses userId from the request body to identify which user's role to update, 
without properly authenticating the request source or authorizing the action based on the user's current role. Essentially, any user who can send a POST 
request to /update-role could potentially change any user's role, including granting themselves or others admin privileges if they know the user IDs.

The secure version introduces session-based authentication and authorization checks:
Session Authentication: By using express-session, the application now tracks whether a user is logged in and who that user is. The userId is stored in the session upon login (though the login mechanism isn't explicitly shown in the code snippets, it's implied).
Authorization Based on Session Data: The route checks if a user is logged in by verifying req.session.userId. It then determines the role of the logged-in user by looking up their details in the users array. Only if the logged-in user is an admin (loggedInUser.role !== 'admin') can the role update proceed.

Additional Security Mechanisms
Role-based Access Control (RBAC): Implement a more robust RBAC system to manage user permissions and roles within the application. RBAC ensures that users can perform only actions allowed by their roles, providing a scalable way to control access across the application.
Audit Logs: Keep detailed audit logs of sensitive actions like role changes. Logging should include who made the change, what was changed, and when it happened. This can help in identifying suspicious activities and is crucial for post-incident analysis.
Two-Factor Authentication (2FA): For sensitive actions, require a second form of verification beyond just the session login, especially for admin-level operations. This could involve sending a confirmation code via email or SMS.
Input Validation and Sanitization: Always validate and sanitize inputs to ensure they meet the expected format and contain no malicious content. This is more relevant to other forms of attacks but is a good practice in all endpoints to prevent exploitation of any vulnerabilities.
Rate Limiting and Anomaly Detection: Implement rate limiting on sensitive routes to prevent abuse. Additionally, use anomaly detection techniques to identify and block unusual activity patterns that could indicate an attack, such as rapid changes to user roles.
Secure Session Management: Ensure that session identifiers are securely generated and managed. Use HTTPS to protect session cookies in transit, set secure cookie attributes (HttpOnly, Secure, SameSite), and implement session expiration and invalidation strategies.
